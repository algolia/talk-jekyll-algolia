include ./partials/mixins
doctype html
html(lang="en")
  include ./partials/header
body
    .reveal
      .slides.unbranded.bg-gradient-dark-inverted.lh-copy.white.f3.fw3

        // Title
        section.slide--horizontal.slide--theme1
          .bg-gradient-april-fools.white.h-100.flcnw.flc.relative
            .f-subheadline.lh-title.mh4.ph6 
              .db Building a 
                .di.b search engine 
              .db with 
                .di.b CSS
            .absolute.bottom-2.right-2
              .flrnw
                .fln.flc.f0
                  img.br-100.h3.grayscale(src='img/avatar.jpg')
                .fln.flcnw.flccv.pl2
                  .fln.tl.f3.b Tim Carry
                  .fln.tl
                    a.link.white(href="https://twitter.com/pixelastic") @pixelastic

        section.slide--horizontal
          .h-100.flcnw.pa3
            .fln.f1.lh-title.tl.b Hacking is...
            .fla.flcnw.f-subheadline.flc
              .db
                .di Overcoming 
                .di.b limitations
              .db
                .di of a 
                .di.b system 
                .di to
              .db 
                .di achieve 
                .di.b new 
                .di outcomes.
            aside.notes
              p Using CSS to make it do something it was not meant to be doing.
              p Not about finding vulnerabilities, but 
              p using CSS for what it was not meant to be
              p CSS is much more than a styling language

        section.slide--horizontal
          .h-100.flcnw.pa3
            .fln.f1.lh-title.tl.b A search engine
            .fla.flcnw
              .fla.flrnw
                .fln.flc.ph4.f2.b.w-20 Keywords
                .fla.flc 
                  img.w-100(src="./img/input-output.png")
                .fln.flc.ph4.f2.b.w-20 Results
            aside.notes
              p A search engine, in its most basic forms takes keywords as input and gives you results as output
              p A great search engine also is Relevant, Fast and Easy to use
              p - Relevant because I want matching results (ie. it works)
              p - Fast because I want the processing to be done quickly
              p - Easy to use, want it to look like a real thing, not a CSS hack

        section.slide--horizontal
          .h-100.flcnw.pa3
            .fla.flcnw.flc.f-headline
              a.link.white.underline-hover(href="https://community.algolia.com/algoliasearch-client-css/demo/" target="_blank") Live demo
            aside.notes
              p Enough talking about the hack, let's show it in action
              p This is the time for the live demo
              p The dangerous time where everything can fail

        section.slide--horizontal
          .h-100.flcnw.pa3
            .fln.f1.lh-title.tl.b CSS has limited support for:
            .fla.h-100.flc
              .fln.h-80.w-50.flcnw.tl.flcspa.f1
                .fln Variables
                .fln Conditions
                .fln Loops
                .fln Functions
                .fln Regular expressions
            aside.notes
              p 
                | Surely, to build a search engine, I will need support for basic constructs like variables, functions, conditions, loops,
                | regex.
              p CSS has some support for that but it's not the level we're used to in other languages
              p don't get me wrong, I love CSS and it's awesome to see variables and functions in the language
              p but here it is still the constraints of my system
              p the goal of the hack will be to overcome those limitations
              p instead of focusing on what CSS cannot do very well, we'll focus on what it is very good at
              
        section.slide--horizontal
          .bg-gradient-april-fools.white.h-100.flcnw.flc
            .f-headline.lh-title.mh6.ph6 Selectors
          aside.notes 
            p In CSS you can select elements by tag name, class, ids
            p by a specific attribute value, by its position in the hierarchy compared to its ancestors or sibling
            p and you can combine all of this

        section.slide--horizontal
          .h-100.flcnw.pa3
            .fln.f1.lh-title.tl.b Main strength of CSS
            .fla.flcnw.f-subheadline.flc
              .db
                .di Selecting only 
                .di.b relevant 
                .di items
              .db 
                .di from a 
                .di.b large pool 
                .di of choices
            aside.notes 
              p You can have the most complex and unsemantic HTML structure, you'll still be able to select exactly the one you care about
              p CSS is really good at that
              p and when you think about this definition, it's pretty close to what you would expect a search engine to do
              p you might have a large pools of potential results, you are only interested in the one that are relevant to your keywords



        include ./slides/basic-principles
        include ./slides/dynamic-update
        include ./slides/several-results
        include ./slides/ordering-results
        include ./slides/highlight

        section.slide--horizontal.slide--theme1
          .bg-gradient-april-fools.white.h-100.flcnw.flc
            .f-subheadline.lh-title.mh6.ph5
              | Impossible only means you haven't found the solution 
              .di.b yet
              .di .

        section.slide--horizontal
          .h-100.flcnw.pa3
            .fla.flcnw.mt5.h-100
              .fla.flc
                a.link.white.f-subheadline.underline(href="https://www.algolia.com/css/demo/") algolia.com/css/demo
              .fln.h-25.flcnw.flcat.flcch
                .fln.flrnw
                  .fln.flcnw.flc.f0
                    img.h3(src="img/github.png")
                  .fln.ml3
                    a.link.white.f1(href="https://github.com/algolia/algoliasearch-client-css") algolia/algoliasearch-client-css
              .fln.flrnw.flrar.pa3
                .fln.flrnw
                  .fln.flc.f0
                    img.br-100.h3.grayscale(src='img/avatar.jpg')
                  .fln.flcnw.flccv.pl2
                    .fln.tl.f3.b Tim Carry
                    .fln.tl
                      a.link.white(href="https://twitter.com/pixelastic") @pixelastic

        include ./partials/aside-horizontal
        include ./partials/aside-vertical

    include ./partials/footer
